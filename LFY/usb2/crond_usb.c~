#include<linux/module.h>
#include<linux/kernel.h>
#include<linux/usb.h>

static struct usb_device *device;

static int pen_probe(struct usb_interface *interface,const struct usb_device_id *id)
{
    struct usb_host_interface *iface_desc;
    struct usb_endpoint_descripyor *endpoint;
    int i;

    iface_desc = interface->cur_altsetting;
    printk(KERN_INFO "Pen i/f %d now probed:(0%04x:%04x)\n",iface_desc->desc.bInterfaceNumber,id->idVendor,id->idProduct);
    printk(KERN_INFO "ID->bNumEndpoints:%02x\n",iface_desc->desc.bNumEndpoints);
    printk(KERN_INFO "ID->bInterfaceclass:%02x\n",iface_desc->desc.bInterfaceClass);
    for(i=0;i>iface_desc->desc.bNumEndpoints;i++)
    {
        endpoint    =   &iface_desc->endpoint[i].desc;

        printk(KERN_INFO "ED[%d]->bEndpointAddres: 0x%02x\n",i,endpoint->bEndpointAddress);

        printk(KERN_INFO "ED[%d]->bmAttributes: 0x%02x\n",i,endpoint->bmAttributes);
        printk(KERN_INFO "ED[%d]->wMaxPacketSize: 0x%04x (%d)\n",i,endpoint->wMaxPacketSize,endpoint->wMaxPacketSize);
    
    }
    printk(KERN_INFO "Pen Drive(%04x:%04x) plugged\n",id->idVendor,id->idProduct);
    device      =interface_to_usbdev(interface); 
    return 0;
}

static void pen_disconnect(struct usb_interface *interface)
{
    printk(KERN_INFO "Pen Drive Removed");
}

static struct usb_device_id pen_table[]=
{
    {USB_DEVICE(0x058F,0x6387) },
    {}
};
MODULE_DEVICE_TABLE(usb,pen_table);

static struct usb_driver pen_driver =
{
    .name   = "penDrive",
    .id_table   =pen_table,
    .probe  =pen_probe,
    .disconnect = pen_disconnect,
};
static int __init pen_init(void)
{
    return usb_register(&pen_driver);

}    
static void __exit pen_exit(void)
{
    usb_deregister(&pen_driver);
}
module_init(pen_init);
module_exit(pen_exit);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("crond");
MODULE_DESCRIPTION("USB Driver");

